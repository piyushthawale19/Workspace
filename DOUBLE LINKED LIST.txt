#include<stdio.h>
#include<stdlib.h>
struct node{
int data;
struct node*next;
struct node*prev;
};
struct node*head;
struct node*ptr;
struct node*temp;
struct node*temp1;
void insert_begin(int val);
void insert_end(int val);
void insert_pos(int val);
void delete_begin();
void delete_end();
void delete_pos();
void display();
int main()
{
int ch,val;
while(1)
{
 printf("\n1.insert at begin \n2.insert at end \n3.insert at pos \n4.delete at begin\n5.delete at end \n6.delete at pos \n7.display \n8.exit");
 printf("\nEnter your choice");
 scanf("%d",&ch);
 switch(ch)
 {
 case 1: insert_begin(val);
 break;
 case 2: insert_end(val);
 break;
 case 3: insert_pos(val);
 break;
 case 4: delete_begin();
 break;
 case 5:delete_end();
 break;
 case 6:delete_pos();
 break;
 case 7:display();
 break;
 case 8:exit(0);
 break;
 default:printf("Enter wrong choice");
 break;
 }
}
}
void insert_begin(int val)
{
 printf("\n enter the number");
ptr=(struct node*)malloc(sizeof(struct node));
if(ptr==NULL)
{
printf("memory is not allocated");
}
else
{
 scanf("%d",&ptr->data);
 if(head==NULL)
{
 ptr->next=NULL;
ptr->prev=NULL;
head=ptr;
}
else
{
 ptr->next=head;
 ptr->prev=NULL;
 head->prev=ptr;
head=ptr;
}
 }
}
void insert_end(int val)
{
 printf("\n enter the no.");
ptr=(struct node*)malloc(sizeof(struct node));
if(ptr==NULL)
{
printf("memory is not allocated");
}
else
{
 scanf("%d",&ptr->data);
 if(head==NULL)
 {
 ptr->next=NULL;
ptr->prev=NULL;
head=ptr;
 }
 else
 {
temp=head;
while(temp->next!=NULL)
{
temp=temp->next;
}
ptr->next=NULL;
temp->next=ptr;
ptr->prev=temp;
 }
 }
 printf("node is inserted");
}
void insert_pos(int val)
{
int i,loc;
printf("enter location where you want to insert");
scanf("%d",&loc);
temp=head;
for( i=0;i<loc-1;i++)
{
temp=temp->next;
if(temp==NULL)
{
 printf("cannot insert");
 return;
}
}
ptr=(struct node*)malloc(sizeof(struct node));
if(ptr==NULL)
{
printf("memory is not allocated");
}
else
{
printf("\n enter value:");
scanf("%d",&ptr->data);
 ptr->next=temp->next;
 ptr->next->prev=ptr;
temp->next=ptr;
ptr->prev=temp;
}
printf("node is inserted");
}
void delete_begin()
{
 if(head==NULL)
 {
 printf("can't delete");
 }
 else if(head->next==NULL)
 {
 printf("\n%d is deleted",head->data);
 free(head);
 }
 else
 {
 temp=head;
 printf("\n%d is deleted",temp->data);
 head=head->next;
 temp->next=NULL;
 head->prev=NULL;
 free(temp);
 }
}
void delete_end()
{
 if(head==NULL)
 {
 printf("linked list is empty");
 }
 else if(head->next==NULL)
 {
 printf("\n%d id deleted",head->data);
 free(head);
 }
 else
 {
 temp=head;
 while(temp->next!=NULL)
 {
 temp=temp->next;
 }
 temp->prev->next=NULL;
 temp->prev=NULL;
 printf("\n %d is deleted",temp->data);
 free(temp);
 }
}
void delete_pos()
{
 int i,loc;
 if(head==NULL)
 {
 printf("linked list is empty");
 }
 else
 {
 temp=head;
 printf("\n enter location");
 scanf("%d",&loc);
 for(i=0;i<loc;i++)
 {
 temp=temp->next;
 if(temp==NULL)
 {
 printf("can't delete");
 }
 }
 temp1=temp->next;
 temp->next=temp1->next;
 temp1->next->prev=temp;
 temp1->next=NULL;
 temp1->prev=NULL;
 printf("\n%d is deleted",temp1->data);
 free(temp1);
 }
}
void display()
{
 temp = head; // Assuming 'temp' is a global variable or declared in the correct scope
 if (head == NULL)
 {
 printf("list is empty");
 }
 else
 {
 while (temp != NULL)
 {
 printf("\t %d ", temp->data);
 temp = temp->next;
 }
 }
}
